<?xml version="1.0" encoding="utf-8"?>
<Page
    x:Class="WinUISnippingTool.Views.Pages.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:WinUISnippingTool.Views.Pages"
    xmlns:userControl="using:WinUISnippingTool.SharedResources.Controls"
    xmlns:toolkit="using:CommunityToolkit.WinUI.UI.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:Interactivity="using:Microsoft.Xaml.Interactivity" 
    xmlns:Interactions="using:Microsoft.Xaml.Interactions.Core"
    mc:Ignorable="d"
    Background="{ThemeResource ApplicationPageBackgroundThemeBrush}"
    ActualThemeChanged="ThemeChanged"
    Unloaded="Page_Unloaded">

    <Interactivity:Interaction.Behaviors>
        <Interactions:EventTriggerBehavior EventName="SizeChanged">
            <Interactions:InvokeCommandAction Command="{x:Bind ViewModel.SizeChangedCommand}"/>
        </Interactions:EventTriggerBehavior>
    </Interactivity:Interaction.Behaviors>
    

    <Grid x:Name="mainGrid"
          KeyboardAcceleratorPlacementMode="Hidden">
        <Grid.KeyboardAccelerators>

            <KeyboardAccelerator Key="X" Modifiers="Shift,Control" >
                <Interactivity:Interaction.Behaviors>
                    <Interactions:EventTriggerBehavior EventName="Invoked">
                        <Interactions:InvokeCommandAction Command="{x:Bind ViewModel.EnterSnippingModeCommand}"
                                                          CommandParameter="True"/>
                    </Interactions:EventTriggerBehavior>
                </Interactivity:Interaction.Behaviors>
            </KeyboardAccelerator>

            <KeyboardAccelerator Key="Z" Modifiers="Control">
                <Interactivity:Interaction.Behaviors>
                    <Interactions:EventTriggerBehavior EventName="Invoked">
                        <Interactions:InvokeCommandAction Command="{x:Bind ViewModel.GlobalUndoCommand}"/>
                    </Interactions:EventTriggerBehavior>
                </Interactivity:Interaction.Behaviors>
            </KeyboardAccelerator>

            <KeyboardAccelerator Key="A" Modifiers="Control">
                <Interactivity:Interaction.Behaviors>
                    <Interactions:EventTriggerBehavior EventName="Invoked">
                        <Interactions:InvokeCommandAction Command="{x:Bind ViewModel.GlobalRedoCommand}"/>
                    </Interactions:EventTriggerBehavior>
                </Interactivity:Interaction.Behaviors>
            </KeyboardAccelerator>

            <KeyboardAccelerator Key="C" Modifiers="Control">
                <Interactivity:Interaction.Behaviors>
                    <Interactions:EventTriggerBehavior EventName="Invoked">
                        <Interactions:InvokeCommandAction Command="{x:Bind ViewModel.SaveBmpToClipboardCommand}"/>
                    </Interactions:EventTriggerBehavior>
                </Interactivity:Interaction.Behaviors>
            </KeyboardAccelerator>

            <KeyboardAccelerator Key="S" Modifiers="Control">
                <Interactivity:Interaction.Behaviors>
                    <Interactions:EventTriggerBehavior EventName="Invoked">
                        <Interactions:InvokeCommandAction Command="{x:Bind ViewModel.SaveFileDialogCommand}"/>
                    </Interactions:EventTriggerBehavior>
                </Interactivity:Interaction.Behaviors>
            </KeyboardAccelerator>

        </Grid.KeyboardAccelerators>

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- Main pane -->
        <Grid Background="{ThemeResource SystemChromeMediumColor}"
              Grid.Row="0"
              Padding="0, 5"
              x:Name="PART_MainPane">

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <!-- New photo (Left) pane  -->
            <StackPanel Grid.Column="0"
                        Margin="20, 0, 0, 0"
                        Orientation="Horizontal"
                        VerticalAlignment="Center"
                        Visibility="{x:Bind ViewModel.IsInCroppingMode, Converter={StaticResource VisibilityConverter}, ConverterParameter=False, Mode=OneWay}">

                <Button Margin="0, 0, 15, 0"
                        Command="{x:Bind ViewModel.EnterSnippingModeCommand}"
                        CommandParameter="False">

                    <StackPanel Orientation="Horizontal"
                                Spacing="5">

                        <ToolTipService.ToolTip>
                            <ToolTip Placement="Bottom">
                                <TextBlock Text="{x:Bind ViewModel.TakeScreenshotTooltipButtonName, Mode=OneWay}"/>
                            </ToolTip>
                        </ToolTipService.ToolTip>


                        <FontIcon Glyph="&#xE710;"
                                  x:Name="NewPictureIcon"
                                  VerticalAlignment="Center"/>

                        <TextBlock x:Name="PART_TakePictureButtonName"
                                   RelativePanel.RightOf="NewPictureIcon"
                                   Text="{x:Bind ViewModel.TakePhotoButtonName, Mode=OneWay}"/>

                    </StackPanel>
                </Button>

                <userControl:SnipControl SnipKinds="{x:Bind ViewModel.SnipShapeKinds}"
                                         SelectedSnipKind="{x:Bind ViewModel.SelectedSnipKind, Mode=TwoWay}"
                                         SelectedCaptureType="{x:Bind ViewModel.CaptureType, Mode=TwoWay}"
                                         IsPhotoButtonEnabled="False"
                                         IsVideoButtonEnabled="True"
                                         IsPaintListEnabled="True"
                                         IsDirectXSupported="True"/>
            </StackPanel>

            <!-- Redact picture (Middle) pane -->
            <StackPanel Orientation="Horizontal"
                        Grid.Column="1"
                        Spacing="5"
                        HorizontalAlignment="Center"
                        x:Name="PART_RedactPicturePane">

                <Button Style="{StaticResource TransparentButton}"
                        Command="{x:Bind ViewModel.SetSimpleBrushCommand}"
                        Visibility="{x:Bind ViewModel.IsInCroppingMode, Converter={StaticResource VisibilityConverter}, ConverterParameter=False, Mode=OneWay}"
                        IsEnabled="{x:Bind ViewModel.IsImageLoaded, Mode=OneWay}">

                    <ToolTipService.ToolTip>
                        <ToolTip Placement="Bottom">
                            <TextBlock Text="{x:Bind ViewModel.SimpleBrushButtonName, Mode=OneWay}"/>
                        </ToolTip>
                    </ToolTipService.ToolTip>

                    <Button.Content>
                        <FontIcon Glyph="&#xED63;" />
                    </Button.Content>

                    <Button.Flyout>
                        <Flyout>
                            <userControl:ColorPicker SelectedColor="{x:Bind ViewModel.SelectedDrawingColor, Mode=TwoWay}"
                                                     ColorList="{x:Bind ViewModel.DrawingColorList}"
                                                     StrokeThickness="{x:Bind ViewModel.DrawingStrokeThickness, Mode=TwoWay}"
                                                     PathStrokeStartLine="Round"
                                                     PathStrokeEndLine="Round"
                                                     Width="300"
                                                     Height="300"
                                                     MinThickness="1"
                                                     MaxThickness="30"
                                                     ShapeOpacity="1"/>
                        </Flyout>
                    </Button.Flyout>
                </Button>

                <Button Style="{StaticResource TransparentButton}"
                        Command="{x:Bind ViewModel.SetMarkerBrushCommand}"
                        Visibility="{x:Bind ViewModel.IsInCroppingMode, Converter={StaticResource VisibilityConverter}, ConverterParameter=False, Mode=OneWay}"
                        IsEnabled="{x:Bind ViewModel.IsImageLoaded, Mode=OneWay}">

                    <ToolTipService.ToolTip>
                        <ToolTip Placement="Bottom">
                            <TextBlock Text="{x:Bind ViewModel.MarkerBrushButtonName, Mode=OneWay}"/>
                        </ToolTip>
                    </ToolTipService.ToolTip>

                    <Button.Content>
                        <FontIcon Glyph="&#xED64;" />
                    </Button.Content>

                    <Button.Flyout>
                        <Flyout>
                            <userControl:ColorPicker SelectedColor="{x:Bind ViewModel.SelectedMarkerColor, Mode=TwoWay}"
                                                     ColorList="{x:Bind ViewModel.MarkerColorList}"
                                                     StrokeThickness="{x:Bind ViewModel.MarkerStrokeThickness, Mode=TwoWay}"
                                                     PathStrokeStartLine="Square"
                                                     PathStrokeEndLine="Square"
                                                     Width="300"
                                                     Height="300"
                                                     MinThickness="10"
                                                     MaxThickness="50"
                                                     ShapeOpacity="0.5"/>
                        </Flyout>
                    </Button.Flyout>
                </Button>

                <Button Style="{StaticResource TransparentButton}"
                        Command="{x:Bind ViewModel.SetEraseBrushCommand}"
                        Visibility="{x:Bind ViewModel.IsInCroppingMode, Converter={StaticResource VisibilityConverter}, ConverterParameter=False, Mode=OneWay}"
                        IsEnabled="{x:Bind ViewModel.IsImageLoaded, Mode=OneWay}">

                    <ToolTipService.ToolTip>
                        <ToolTip Placement="Bottom">
                            <TextBlock Text="{x:Bind ViewModel.EraseBrushButtonName, Mode=OneWay}"/>
                        </ToolTip>
                    </ToolTipService.ToolTip>

                    <FontIcon Glyph="&#xED60;" />


                </Button>

                <Button Style="{StaticResource TransparentButton}"
                        Command="{x:Bind ViewModel.ResetCanvasCommand}"
                        Visibility="{x:Bind ViewModel.IsInCroppingMode, Converter={StaticResource VisibilityConverter}, ConverterParameter=False, Mode=OneWay}"
                        IsEnabled="{x:Bind ViewModel.IsImageLoaded, Mode=OneWay}">
                    <FontIcon Glyph="&#xED62;" />
                </Button>

                <Border Background="{ThemeResource SubtleFillColorSecondaryBrush}"
                        Width="1"
                        Height="27"
                        HorizontalAlignment="Stretch"/>

                <Button Style="{StaticResource TransparentButton}"
                        Visibility="{x:Bind ViewModel.IsInCroppingMode, Converter={StaticResource VisibilityConverter}, ConverterParameter=False, Mode=OneWay}"
                        IsEnabled="{x:Bind ViewModel.IsImageLoaded, Mode=OneWay}"
                        Command="{x:Bind ViewModel.EnterCroppingModeCommand}">

                    <ToolTipService.ToolTip>
                        <ToolTip Placement="Bottom">
                            <TextBlock Text="{x:Bind ViewModel.ImageCropperButtonName, Mode=OneWay}"/>
                        </ToolTip>
                    </ToolTipService.ToolTip>

                    <FontIcon Glyph="&#xE7A8;" />

                </Button>

                <Button Style="{StaticResource TransparentButton}"
                        Visibility="{x:Bind ViewModel.IsInCroppingMode, Converter={StaticResource VisibilityConverter}, ConverterParameter=True, Mode=OneWay}"
                        IsEnabled="{x:Bind ViewModel.IsImageLoaded, Mode=OneWay}"
                        Command="{x:Bind ViewModel.CommitCropCommand}">
                    <FontIcon Glyph="&#xE73E;" />
                </Button>


                <Button Style="{StaticResource TransparentButton}"
                        Visibility="{x:Bind ViewModel.IsInCroppingMode, Converter={StaticResource VisibilityConverter}, ConverterParameter=True, Mode=OneWay}"
                        Command="{x:Bind ViewModel.ExitCropCommand}">
                    <FontIcon Glyph="&#xE8BB;" />
                </Button>

                <Border Background="{ThemeResource SubtleFillColorSecondaryBrush}"
                        Width="1"
                        Height="27"
                        HorizontalAlignment="Stretch"/>

                <Button Style="{StaticResource TransparentButton}"
                        Command="{x:Bind ViewModel.GlobalUndoCommand}"
                        Visibility="{x:Bind ViewModel.IsInCroppingMode, Converter={StaticResource VisibilityConverter}, ConverterParameter=False, Mode=OneWay}">

                    <ToolTipService.ToolTip>
                        <ToolTip Placement="Bottom">
                            <TextBlock Text="{x:Bind ViewModel.UndoButtonName, Mode=OneWay}"/>
                        </ToolTip>
                    </ToolTipService.ToolTip>

                    <FontIcon Glyph="&#xE7A7;" />

                </Button>

                <Button Style="{StaticResource TransparentButton}"
                        Command="{x:Bind ViewModel.GlobalRedoCommand}"
                        Visibility="{x:Bind ViewModel.IsInCroppingMode, Converter={StaticResource VisibilityConverter}, ConverterParameter=False, Mode=OneWay}">

                    <ToolTipService.ToolTip>
                        <ToolTip Placement="Bottom">
                            <TextBlock Text="{x:Bind ViewModel.RedoButtonName, Mode=OneWay}"/>
                        </ToolTip>
                    </ToolTipService.ToolTip>

                    <FontIcon Glyph="&#xE7A6;" />

                </Button>
            </StackPanel>

            <!-- Save/Load picture (Right) pane -->
            <StackPanel Orientation="Horizontal"
                        HorizontalAlignment="Right"
                        Grid.Column="2"
                        Spacing="5"
                        Visibility="{x:Bind ViewModel.IsInCroppingMode, Converter={StaticResource VisibilityConverter}, ConverterParameter=False, Mode=OneWay}">

                <Button Style="{StaticResource TransparentButton}"
                        Command="{x:Bind ViewModel.SaveFileDialogCommand}"
                        CommandParameter="False"
                        IsEnabled="{x:Bind ViewModel.IsSnapshotTaken, Mode=OneWay}">

                    <ToolTipService.ToolTip>
                        <ToolTip Placement="Bottom">
                            <TextBlock Text="{x:Bind ViewModel.SaveButtonName, Mode=OneWay}"/>
                        </ToolTip>
                    </ToolTipService.ToolTip>

                    <FontIcon Glyph="&#xE792;" />

                </Button>

                <Button Style="{StaticResource TransparentButton}"
                        IsEnabled="{x:Bind ViewModel.IsImageLoaded, Mode=OneWay}"
                        Command="{x:Bind ViewModel.SaveBmpToClipboardCommand}"
                        CommandParameter="False">

                    <ToolTipService.ToolTip>
                        <ToolTip Placement="Bottom">
                            <TextBlock Text="{x:Bind ViewModel.CopyButtonName, Mode=OneWay}"/>
                        </ToolTip>
                    </ToolTipService.ToolTip>

                    <FontIcon Glyph="&#xE8C8;" />

                </Button>

                <Border Background="{ThemeResource SubtleFillColorSecondaryBrush}"
                        Width="1"
                        Height="27"
                        HorizontalAlignment="Stretch"/>

                <Button Content="..."
                        Style="{StaticResource TransparentButton}">
                    <Button.Flyout>
                        <MenuFlyout  Placement="Bottom">
                            <MenuFlyoutItem Text="{x:Bind ViewModel.SettingsButtonName, Mode=OneWay}" 
                                            Click="MenuFlyoutItem_Click" >
                                <MenuFlyoutItem.Icon>
                                    <FontIcon Glyph="&#xE713;" />
                                </MenuFlyoutItem.Icon>
                            </MenuFlyoutItem>
                        </MenuFlyout>
                    </Button.Flyout>
                </Button>
            </StackPanel>

        </Grid>

        <!-- Separator -->
        <Border Background="{ThemeResource ControlSolidFillColorDefaultBrush}"
                Height="1"
                Grid.Row="1"
                HorizontalAlignment="Stretch"
                x:Name="PART_Separator"/>

        <!-- Canvas -->
        <Border Grid.Row="2"
                Background="{ThemeResource SolidBackgroundFillColorTertiaryBrush}"
                x:Name="PART_Border">

            <ItemsControl ItemsSource="{x:Bind ViewModel.CanvasItems}"
                          HorizontalContentAlignment="Center"
                          VerticalContentAlignment="Center"
                          VerticalAlignment="Center"
                          HorizontalAlignment="Center"
                          DataContext="{x:Bind ViewModel}"
                          Width="{x:Bind ViewModel.CanvasWidth, Mode=OneWay}"
                          Height="{x:Bind ViewModel.CanvasHeight, Mode=OneWay}"
                          x:Name="PART_Canvas">

                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <Canvas Background="Transparent"
                                RenderTransform="{Binding TransformSource, Mode=OneWay}"
                                Width="{Binding CanvasWidth, Mode=OneWay}"
                                Height="{Binding CanvasHeight, Mode=OneWay}">
                            <Interactivity:Interaction.Behaviors>

                                <Interactions:EventTriggerBehavior EventName="PointerWheelChanged">
                                    <Interactions:InvokeCommandAction 
                                        Command="{Binding DataContext.ScaleCanvasCommand, ElementName=PART_Canvas}" />
                                </Interactions:EventTriggerBehavior>

                                <Interactions:EventTriggerBehavior EventName="PointerMoved">
                                    <Interactions:InvokeCommandAction 
                                        Command="{Binding DataContext.PointerMovedCommand, ElementName=PART_Canvas}" />
                                </Interactions:EventTriggerBehavior>

                                <Interactions:EventTriggerBehavior EventName="PointerPressed">
                                    <Interactions:InvokeCommandAction 
                                        Command="{Binding DataContext.PointerPressedCommand, ElementName=PART_Canvas}" />
                                </Interactions:EventTriggerBehavior>

                                <Interactions:EventTriggerBehavior EventName="PointerReleased">
                                    <Interactions:InvokeCommandAction 
                                        Command="{Binding DataContext.PointerReleasedCommand, ElementName=PART_Canvas}" />
                                </Interactions:EventTriggerBehavior>

                            </Interactivity:Interaction.Behaviors>


                        </Canvas>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>

                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <toolkit:ImageCropper x:Name="ImageCropper"/>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>

        </Border>


        <!-- Sub pane for small screen -->
        <Grid Background="{ThemeResource SystemChromeMediumColor}"
              x:Name="PART_SubPane"
              Grid.Row="3"
              Height="Auto">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
        </Grid>
    </Grid>
</Page>
